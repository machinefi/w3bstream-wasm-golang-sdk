// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson97830aa9DecodeGithubComMachinefiW3bstreamWasmGolangSdkExamplesTeslaPocModel(in *jlexer.Lexer, out *Tesla) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "tesla_name":
			out.Name = string(in.String())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "percent_remaining":
			out.Percent_remaining = float64(in.Float64())
		case "range":
			out.Range = float64(in.Float64())
		case "capacity":
			out.Capacity = float64(in.Float64())
		case "is_plugged_in":
			out.Plugged_in = bool(in.Bool())
		case "state":
			out.Charge_state = string(in.String())
		case "odometer":
			out.Odometer = float64(in.Float64())
		case "back_left":
			out.Back_left = float64(in.Float64())
		case "back_right":
			out.Back_right = float64(in.Float64())
		case "front_left":
			out.Front_left = float64(in.Float64())
		case "front_right":
			out.Front_right = float64(in.Float64())
		case "update_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson97830aa9EncodeGithubComMachinefiW3bstreamWasmGolangSdkExamplesTeslaPocModel(out *jwriter.Writer, in Tesla) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"tesla_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"percent_remaining\":"
		out.RawString(prefix)
		out.Float64(float64(in.Percent_remaining))
	}
	{
		const prefix string = ",\"range\":"
		out.RawString(prefix)
		out.Float64(float64(in.Range))
	}
	{
		const prefix string = ",\"capacity\":"
		out.RawString(prefix)
		out.Float64(float64(in.Capacity))
	}
	{
		const prefix string = ",\"is_plugged_in\":"
		out.RawString(prefix)
		out.Bool(bool(in.Plugged_in))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.Charge_state))
	}
	{
		const prefix string = ",\"odometer\":"
		out.RawString(prefix)
		out.Float64(float64(in.Odometer))
	}
	{
		const prefix string = ",\"back_left\":"
		out.RawString(prefix)
		out.Float64(float64(in.Back_left))
	}
	{
		const prefix string = ",\"back_right\":"
		out.RawString(prefix)
		out.Float64(float64(in.Back_right))
	}
	{
		const prefix string = ",\"front_left\":"
		out.RawString(prefix)
		out.Float64(float64(in.Front_left))
	}
	{
		const prefix string = ",\"front_right\":"
		out.RawString(prefix)
		out.Float64(float64(in.Front_right))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Raw((in.Time).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tesla) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson97830aa9EncodeGithubComMachinefiW3bstreamWasmGolangSdkExamplesTeslaPocModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tesla) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson97830aa9EncodeGithubComMachinefiW3bstreamWasmGolangSdkExamplesTeslaPocModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tesla) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson97830aa9DecodeGithubComMachinefiW3bstreamWasmGolangSdkExamplesTeslaPocModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tesla) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson97830aa9DecodeGithubComMachinefiW3bstreamWasmGolangSdkExamplesTeslaPocModel(l, v)
}
