// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	http "net/http"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson35bff3f9DecodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel(in *jlexer.Lexer, out *HttpResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = string(in.String())
		case "StatusCode":
			out.StatusCode = int(in.Int())
		case "Proto":
			out.Proto = string(in.String())
		case "Header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Header = make(http.Header)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Header)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson35bff3f9EncodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel(out *jwriter.Writer, in HttpResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"StatusCode\":"
		out.RawString(prefix)
		out.Int(int(in.StatusCode))
	}
	{
		const prefix string = ",\"Proto\":"
		out.RawString(prefix)
		out.String(string(in.Proto))
	}
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix)
		if in.Header == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Header {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if v4Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5, v6 := range v4Value {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.String(string(v6))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Body\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HttpResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson35bff3f9EncodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HttpResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson35bff3f9EncodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HttpResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson35bff3f9DecodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HttpResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson35bff3f9DecodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel(l, v)
}
func easyjson35bff3f9DecodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel1(in *jlexer.Lexer, out *HttpRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Method":
			out.Method = string(in.String())
		case "Url":
			out.Url = string(in.String())
		case "Header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Header = make(http.Header)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 []string
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						in.Delim('[')
						if v9 == nil {
							if !in.IsDelim(']') {
								v9 = make([]string, 0, 4)
							} else {
								v9 = []string{}
							}
						} else {
							v9 = (v9)[:0]
						}
						for !in.IsDelim(']') {
							var v10 string
							v10 = string(in.String())
							v9 = append(v9, v10)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Header)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson35bff3f9EncodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel1(out *jwriter.Writer, in HttpRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"Url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix)
		if in.Header == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Header {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if v12Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v13, v14 := range v12Value {
						if v13 > 0 {
							out.RawByte(',')
						}
						out.String(string(v14))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Body\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HttpRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson35bff3f9EncodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HttpRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson35bff3f9EncodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HttpRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson35bff3f9DecodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HttpRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson35bff3f9DecodeGithubComMachinefiW3bstreamWasmGolangSdkApiModel1(l, v)
}
